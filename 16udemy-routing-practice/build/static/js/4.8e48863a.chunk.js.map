{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","useParams","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.8e48863a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1JuKP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__LZ4zs\",\"loading\":\"NewCommentForm_loading__PGr-J\",\"control\":\"NewCommentForm_control__3RKrz\",\"actions\":\"NewCommentForm_actions__1amEp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1ZZ8h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3lJLc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2aFPy\"};","import { useRef, useEffect } from 'react';\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error} = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if( status === 'completed' && !error) {\n        onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n            <LoadingSpinner/>\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from './CommentsList';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n  const params = useParams();\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n               <div className='centered'>\n                 <LoadingSpinner/>\n               </div>\n               );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments =  <CommentsList comments={loadedComments} />;\n  }\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n      comments =  <p className='centered'>No Comment were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from 'react';\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes//HighlightedQuote';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\n\r\nconst QuoteDetail = () => {\r\n    const params = useParams();\r\n    const match = useRouteMatch();\r\n    const {sendRequest, status, data: quote, error} = useHttp(getSingleQuote, true);\r\n    const { quoteId } = params;\r\n\r\n    useEffect(()=> {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (status === 'error') {\r\n        return <p className='centered focused'>{error}</p>\r\n    }\r\n\r\n    if (!quote.text) {\r\n        return <p> Quote Not Found</p>;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote text={quote.text} author={quote.author}/>\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments/>\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n};\r\nexport default QuoteDetail;"],"sourceRoot":""}